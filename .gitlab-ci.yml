workflow:
  rules:
    - if: $CI_COMMIT_TAG 
      when: never
    - when: always

stages:
  - build
  - test
  - release

badge-doc-cover:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/python:3.11-alpine
  before_script:
    - echo "Install python dependencies"
    - pip install anybadge interrogate==1.7.0
  script:
    - interrogate -m -n -p -vv caen_setup -f 0 -o docs_coverage.txt
    - cat docs_coverage.txt
    - covlevel=$(tail -n 1 docs_coverage.txt | cut -d " " -f7 | cut -d "%" -f1)
    - anybadge -l "Docs coverage" -v "$covlevel" --suffix='%' -f docs_coverage.svg 50=red 60=orange 80=yellow 100=green
  artifacts:
    paths:
      - docs_coverage.svg
      - docs_coverage.txt
    when: always
    expire_in: never

build-job:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/python:3.11-alpine
  script:
  - |
    python3 -m pip install --upgrade build
    python3 -m build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

test-job:
  stage: test
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/python:3.11-alpine
  script:
  - |
    pip install pytest
    pip install -e .
    pytest -v

publish-package:
  stage: release
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/python:3.11-alpine
  rules:
    - when: manual
  needs:
    - job: build-job
      artifacts: true
  script:
    - echo "Publish package in gitlab package registry"
    - pip install twine
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    - |
      PACKAGE_VERSION=$(python -c "from glob import glob; print(glob('dist/*.whl')[0].split('-')[1])")
      echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> package.env
    - |
      WHL_URI=$(sha256sum dist/*.whl | sed 's/ \+dist//g')
      echo "WHL_URI=$WHL_URI" >> package.env
      TAR_URI=$(sha256sum dist/*.tar.gz | sed 's/ \+dist//g')
      echo "TAR_URI=$TAR_URI" >> package.env
      cat package.env
  artifacts:
    reports:
      dotenv: package.env

prepare-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: publish-package
      artifacts: true  
  script:
    - echo "Prepare package release"
  release:
    tag_name: $PACKAGE_VERSION
    name: 'Release $PACKAGE_VERSION'
    description: 'Gitlab CI/CD auto release'
    assets:
      links:
        - name: ".whl direct link"
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/files/${WHL_URI}'
        - name: ".tar.gz direct link"
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/files/${TAR_URI}'
